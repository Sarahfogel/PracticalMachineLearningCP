{
    "contents" : "library(caret)\nlibrary(AppliedPredictiveModeling)\nset.seed(3433)\ndata(AlzheimerDisease)\nadData = data.frame(diagnosis,predictors)\ninTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]\ntraining = adData[ inTrain,]\ntesting = adData[-inTrain,]\n\nnames(adData)[grep(\"^IL\", names(adData))]\n\nILdata<-adData[,grep(\"^IL\", names(adData))]\nppcs<-preProcess(ILdata, method=\"pca\", thresh=.8)\n\nILdatafull<-data.frame(ILdata, diagnosis)\n\nfit1<-train(diagnosis~., data=ILdata, method=\"glm\")\n\nsummary(fit1)\nfit1$finalModel\nconfusionMatrix(adData$diagnosis, predict(fit1, ILdata))\nppcs\n\n\ntrainpc<-predict(ppcs, ILdata)\nfitpc<-train(diagnosis~., data=trainpc, method=\"glm\")\n\nconfusionMatrix(adData$diagnosis, predict(fitpc, trainpc))\n\n\n\nlibrary(AppliedPredictiveModeling)\ndata(segmentationOriginal)\nlibrary(caret)\n\ntraining<-segmentationOriginal[which(segmentationOriginal$Case==\"Train\"),]\ntesting<-segmentationOriginal[which(segmentationOriginal$Case==\"Test\"),]\n\nset.seed(125)\nfit<-train(Class~., data=training, method=\"rpart\")\nfit\nfit$finalModel\nplot(fit$finalModel)\n\n\n\nlibrary(pgmm)\ndata(olive)\nolive = olive[,-1]\nlibrary(tree)\nfit<-tree(Area~., data=olive)\n\nnewdata = as.data.frame(t(colMeans(olive)))\npredict(fit, newdata=newdata)\n\n\n\nlibrary(ElemStatLearn)\ndata(SAheart)\nset.seed(8484)\ntrain = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)\ntrainSA = SAheart[train,]\ntestSA = SAheart[-train,]\nset.seed(13234)\n\nfit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method=\"glm\", family=\"binomial\")\n\nmissClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}\n\nmissClass(trainSA$chd, predict(fit, trainSA))\nmissClass(testSA$chd, predict(fit, testSA))\n\n\n\nlibrary(ElemStatLearn)\ndata(vowel.train)\ndata(vowel.test) \n\nvowel.train$y<-as.factor(vowel.train$y)\nvowel.test$y<-as.factor(vowel.test$y)\nset.seed(33833)\n\nfit<-train(y~., data=vowel.train, method=\"rf\")\nvarImp(fit)\n\nfit.gbm<-train(y~., data=vowel.train, method=\"gbm\")\n\nfit\nfit.gbm\n\n\n\nlibrary(caret)\nlibrary(gbm)\nset.seed(3433)\nlibrary(AppliedPredictiveModeling)\ndata(AlzheimerDisease)\nadData = data.frame(diagnosis,predictors)\ninTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]\ntraining = adData[ inTrain,]\ntesting = adData[-inTrain,]\n\nset.seed(62433)\nfit<-train(diagnosis~., data=training, method=\"rf\")\nfit.gbm<-train(diagnosis~., data=training, method=\"gbm\", verbose=F)\nfit.lda<-train(diagnosis~., data=training, method=\"lda\")\n\nconfusionMatrix(testing$diagnosis, predict(fit, testing))\nconfusionMatrix(testing$diagnosis, predict(fit.gbm, testing))\nconfusionMatrix(testing$diagnosis, predict(fit.lda, testing))\n\n\nset.seed(3523)\nlibrary(AppliedPredictiveModeling)\ndata(concrete)\ninTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]\ntraining = concrete[ inTrain,]\ntesting = concrete[-inTrain,]\n\nset.seed(233)\nlibrary(e1071)\n\nfit.lasso<-train(CompressiveStrength~., data=training, method=\"lasso\")\n\nplot(fit.lasso$finalModel, xvar=\"penalty\")\n\n\n\n\nlibrary(lubridate)  # For year() function below\ndat = read.csv(\"C:/Users/Sarah/Desktop/gaData.csv\")\ntraining = dat[year(dat$date) < 2012,]\ntesting = dat[(year(dat$date)) > 2011,]\ntstrain = ts(training$visitsTumblr)\n\nlibrary(forecast)\nfit<-bats(tstrain)\nf<-forecast(fit, h=235)\nf\nplot(f)\npoints(366:600, testing$visitsTumblr)\n\n\nset.seed(3523)\nlibrary(AppliedPredictiveModeling)\ndata(concrete)\ninTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]\ntraining = concrete[ inTrain,]\ntesting = concrete[-inTrain,]\n\nset.seed(325)\nfit<-svm(CompressiveStrength~., data=training)\npred<-predict(fit, testing)\n\nsqrt(mean((testing$CompressiveStrength-pred)^2))\n",
    "created" : 1431993797481.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2987772675",
    "id" : "AC4826E3",
    "lastKnownWriteTime" : 31244173393002613,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}